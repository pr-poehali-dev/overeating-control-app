import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import Icon from '@/components/ui/icon';

interface Question {
  id: number;
  title: string;
  subtitle: string;
  options: Array<{
    emoji: string;
    label: string;
    description?: string;
  }>;
}

const questions: Question[] = [
  {
    id: 2,
    title: '–ü–∏—Ç–∞–Ω–∏–µ –∏ –ø–∏—â–µ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏',
    subtitle: '–ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞—à —Ä–∞—Ü–∏–æ–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è: –º–Ω–æ–≥–æ —Ñ—Ä—É–∫—Ç–æ–≤, –º–Ω–æ–≥–æ –æ–≤–æ—â–µ–π, —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–µ–∂–∏—Ä–Ω—ã—Ö –±–µ–ª–∫–æ–≤?',
    options: [
      { emoji: 'üìä', label: '–†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞' },
      { emoji: 'üìä', label: '–ò–Ω–æ–≥–¥–∞', description: '1-2 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é' },
      { emoji: 'üìä', label: '–ß–∞—Å—Ç–æ', description: '3-4 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é' },
      { emoji: 'üìä', label: '–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞', description: '5-7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é' },
    ],
  },
  {
    id: 3,
    title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    subtitle: '–ö–∞–∫ –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏?',
    options: [
      { emoji: 'üõèÔ∏è', label: '–ü–∞—Å—Å–∏–≤–Ω–∞—è', description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' },
      { emoji: 'üö∂', label: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', description: '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é' },
      { emoji: 'üèÉ', label: '–£–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω–∞—è', description: '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å' },
      { emoji: 'üèãÔ∏è', label: '–ê–∫—Ç–∏–≤–Ω–∞—è', description: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å' },
    ],
  },
  {
    id: 4,
    title: '–≠–Ω–µ—Ä–≥–∏—è, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ —Å–æ–Ω',
    subtitle: '–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏, –æ–±—â–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é?',
    options: [
      { emoji: 'üòî', label: '–ü–ª–æ—Ö–æ', description: '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å, –ø–ª–æ—Ö–æ–π —Å–æ–Ω, –æ—á–µ–Ω—å –º–∞–ª–æ —ç–Ω–µ—Ä–≥–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å' },
      { emoji: 'üòê', label: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', description: '–ß–∞—Å—Ç–æ —É—Å—Ç–∞—é, —Å–æ–Ω –ø—Ä–µ—Ä—ã–≤–∏—Å—Ç—ã–π, —ç–Ω–µ—Ä–≥–∏—è —Å–Ω–∏–∂–µ–Ω–∞' },
      { emoji: 'üôÇ', label: '–•–æ—Ä–æ—à–æ', description: '–í –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ–¥—Ä, —Å–æ–Ω —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞' },
      { emoji: 'ü§©', label: '–û—Ç–ª–∏—á–Ω–æ', description: '–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –±–æ–¥—Ä—ã–º, —Ö–æ—Ä–æ—à–æ —Å–ø–ª—é, –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏' },
    ],
  },
  {
    id: 5,
    title: '–í–µ—Å –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å',
    subtitle: '–ö–∞–∫ –≤—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–≤–æ–π –≤–µ—Å –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç?',
    options: [
      { emoji: 'üò∞', label: '–°–µ—Ä—å—ë–∑–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞', description: '–í–µ—Å —Å–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –º–æ—é –∂–∏–∑–Ω—å –∏ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ' },
      { emoji: 'üòü', label: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–∑–±—ã—Ç–æ–∫', description: '–ß–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è' },
      { emoji: 'üòä', label: '–ù–µ–±–æ–ª—å—à–æ–π –∏–∑–±—ã—Ç–æ–∫', description: '–ò–Ω–æ–≥–¥–∞ –æ—â—É—â–∞–µ—Ç—Å—è –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç' },
      { emoji: 'üòå', label: '–ù–æ—Ä–º–∞', description: '–ú–æ–π –≤–µ—Å –Ω–µ –º–µ—à–∞–µ—Ç –º–Ω–µ –∂–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ' },
    ],
  },
  {
    id: 6,
    title: '–û–±—â–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∂–∏–∑–Ω—å—é',
    subtitle: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –≤ —Ü–µ–ª–æ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è?',
    options: [
      { emoji: 'üòî', label: '–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å' },
      { emoji: 'üòê', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ' },
      { emoji: 'üôÇ', label: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å' },
      { emoji: 'ü§©', label: '–í—ã—Å–æ–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å' },
    ],
  },
];

export default function Index() {
  const [currentScreen, setCurrentScreen] = useState(0);
  const [answers, setAnswers] = useState<Record<number, number>>({});
  const [processingProgress, setProcessingProgress] = useState(0);

  const totalScreens = 8;
  const progressPercentage = (currentScreen / totalScreens) * 100;

  const handleStart = () => {
    setCurrentScreen(1);
  };

  const handleAnswer = (questionId: number, optionIndex: number) => {
    setAnswers({ ...answers, [questionId]: optionIndex });
    
    if (currentScreen < 6) {
      setTimeout(() => {
        setCurrentScreen(currentScreen + 1);
      }, 300);
    } else {
      setCurrentScreen(7);
      simulateProcessing();
    }
  };

  const simulateProcessing = () => {
    let progress = 0;
    const interval = setInterval(() => {
      progress += 5;
      setProcessingProgress(progress);
      
      if (progress >= 100) {
        clearInterval(interval);
        setTimeout(() => {
          setCurrentScreen(8);
        }, 500);
      }
    }, 100);
  };

  const calculateScore = () => {
    let total = 0;
    Object.values(answers).forEach(value => {
      total += value;
    });
    return total;
  };

  const handleViewResult = () => {
    setCurrentScreen(9);
  };

  if (currentScreen === 0) {
    return (
      <div className="min-h-screen bg-background flex flex-col items-center justify-center p-6">
        <div className="w-full max-w-md space-y-8 animate-fade-in">
          <div className="flex justify-center mb-8">
            <div className="relative w-24 h-24">
              <svg className="w-24 h-24" viewBox="0 0 100 100">
                <circle
                  cx="50"
                  cy="50"
                  r="35"
                  fill="none"
                  stroke="url(#gradient)"
                  strokeWidth="8"
                  strokeLinecap="round"
                  strokeDasharray="180 220"
                  transform="rotate(-90 50 50)"
                />
                <defs>
                  <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stopColor="#FF6B6B" />
                    <stop offset="50%" stopColor="#FFD93D" />
                    <stop offset="100%" stopColor="#6BCB77" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-3 h-3 bg-primary rounded-full animate-pulse" />
              </div>
            </div>
          </div>
          
          <div className="text-center space-y-4">
            <h1 className="text-3xl font-bold leading-tight">
              –ü—Ä–æ–≤–µ–¥—ë–º –Ω–µ–±–æ–ª—å—à–æ–π —Å–∫—Ä–∏–Ω–∏–Ω–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å{' '}
              <span className="text-primary">–≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</span>
            </h1>
          </div>

          <Button
            onClick={handleStart}
            className="w-full h-14 text-lg font-semibold rounded-full bg-primary hover:bg-primary/90"
          >
            –ù–∞—á–Ω—ë–º!
          </Button>
        </div>
      </div>
    );
  }

  if (currentScreen === 7) {
    return (
      <div className="min-h-screen bg-background flex flex-col items-center justify-center p-6">
        <div className="w-full max-w-md space-y-8 animate-fade-in">
          <div className="flex justify-center">
            <div className="relative w-40 h-40">
              <svg className="w-40 h-40 transform -rotate-90">
                <circle
                  cx="80"
                  cy="80"
                  r="60"
                  fill="none"
                  stroke="#E5E7EB"
                  strokeWidth="12"
                />
                <circle
                  cx="80"
                  cy="80"
                  r="60"
                  fill="none"
                  stroke="url(#progressGradient)"
                  strokeWidth="12"
                  strokeLinecap="round"
                  strokeDasharray={`${(processingProgress / 100) * 377} 377`}
                  className="transition-all duration-300"
                />
                <defs>
                  <linearGradient id="progressGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" stopColor="#5B7FFF" />
                    <stop offset="100%" stopColor="#9B87F5" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="text-3xl font-bold">{processingProgress}%</span>
              </div>
            </div>
          </div>

          <div className="text-center space-y-4">
            <h2 className="text-2xl font-bold">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h2>
          </div>

          <Card className="p-4 bg-primary/10 border-primary/20">
            <div className="flex gap-3">
              <span className="text-2xl">üëÜ</span>
              <p className="text-sm leading-relaxed">
                <span className="font-semibold">–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º.</span>{' '}
                –ï–≥–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ –ø–æ–æ—â—Ä—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º
              </p>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (currentScreen === 8) {
    return (
      <div className="min-h-screen bg-background flex flex-col items-center justify-center p-6">
        <div className="w-full max-w-md space-y-8 animate-fade-in">
          <div className="flex justify-center">
            <div className="w-32 h-32 rounded-full bg-primary flex items-center justify-center animate-scale-in">
              <Icon name="Check" className="text-white" size={64} strokeWidth={3} />
            </div>
          </div>

          <div className="text-center space-y-4">
            <h2 className="text-3xl font-bold">–ì–æ—Ç–æ–≤–æ</h2>
          </div>

          <Card className="p-4 bg-primary/10 border-primary/20">
            <div className="flex gap-3">
              <span className="text-2xl">üëÜ</span>
              <p className="text-sm leading-relaxed">
                <span className="font-semibold">–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º.</span>{' '}
                –ï–≥–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ –ø–æ–æ—â—Ä—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º
              </p>
            </div>
          </Card>

          <Button
            onClick={handleViewResult}
            className="w-full h-14 text-lg font-semibold rounded-full bg-primary hover:bg-primary/90"
          >
            –£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          </Button>
        </div>
      </div>
    );
  }

  if (currentScreen === 9) {
    const score = calculateScore();
    const maxScore = questions.length * 3;
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-400 to-yellow-500 flex flex-col items-center justify-between p-6">
        <div className="w-full max-w-md pt-12 pb-24 space-y-6 animate-fade-in">
          <Card className="p-6 bg-white shadow-xl rounded-3xl space-y-4">
            <div className="space-y-2">
              <p className="text-sm text-gray-600">
                –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <span className="text-red-600 font-bold text-lg">{score} –±–∞–ª–ª–æ–≤</span>
              </p>
              <div className="inline-block px-4 py-1.5 bg-red-600 text-white font-bold rounded-full text-sm">
                –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
              </div>
            </div>

            <div className="space-y-3">
              <h2 className="text-xl font-bold leading-tight">
                –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
              </h2>

              <div className="space-y-2">
                <h3 className="font-bold text-base">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
                <p className="text-sm text-gray-700 leading-relaxed">
                  –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏.
                </p>
                <p className="text-sm text-gray-700 leading-relaxed">
                  –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º, —Ç–∞–∫–∏–µ –∫–∞–∫ –æ–∂–∏—Ä–µ–Ω–∏–µ, —è–≤–ª—è—é—Ç—Å—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –∂–∏–∑–Ω–∏.
                </p>
              </div>
            </div>
          </Card>
        </div>

        <div className="w-full max-w-md pb-8">
          <Button
            onClick={() => setCurrentScreen(0)}
            className="w-full h-14 text-lg font-semibold rounded-full bg-primary hover:bg-primary/90 shadow-lg"
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </Button>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentScreen - 1];

  return (
    <div className="min-h-screen bg-background">
      <div className="fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur-sm border-b">
        <div className="max-w-md mx-auto px-6 py-4">
          <div className="flex items-center gap-3">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => currentScreen > 1 && setCurrentScreen(currentScreen - 1)}
              className="shrink-0"
            >
              <Icon name="ChevronLeft" size={24} />
            </Button>
            <Progress value={progressPercentage} className="h-2" />
          </div>
        </div>
      </div>

      <div className="pt-20 pb-8 px-6">
        <div className="max-w-md mx-auto space-y-8 animate-fade-in">
          <div className="text-center space-y-2">
            <h2 className="text-2xl font-bold">{currentQuestion.title}</h2>
            <p className="text-muted-foreground leading-relaxed">
              {currentQuestion.subtitle}
            </p>
          </div>

          <div className="space-y-3">
            {currentQuestion.options.map((option, index) => (
              <Card
                key={index}
                className="p-4 cursor-pointer transition-all hover:shadow-lg hover:scale-[1.02] active:scale-[0.98]"
                onClick={() => handleAnswer(currentQuestion.id, index)}
              >
                <div className="flex items-start gap-3">
                  <span className="text-3xl shrink-0">{option.emoji}</span>
                  <div className="flex-1 min-w-0">
                    <div className="font-semibold">{option.label}</div>
                    {option.description && (
                      <div className="text-sm text-muted-foreground mt-1">
                        {option.description}
                      </div>
                    )}
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}