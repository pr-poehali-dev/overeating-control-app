import { useState } from 'react'

function Index() {
  const [currentScreen, setCurrentScreen] = useState(0)
  const [answers, setAnswers] = useState<Record<string, string>>({})

  const questions = [
    {
      id: 'nutrition',
      title: '–ü–∏—Ç–∞–Ω–∏–µ –∏ –ø–∏—â–µ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏',
      description: '–ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞—à —Ä–∞—Ü–∏–æ–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è: –º–Ω–æ–≥–æ —Ñ—Ä—É–∫—Ç–æ–≤, –º–Ω–æ–≥–æ –æ–≤–æ—â–µ–π, —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–µ–∂–∏—Ä–Ω—ã—Ö –±–µ–ª–∫–æ–≤?',
      icon: 'üçå',
      options: [
        { value: 'rare', label: '–†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞', subtitle: '', bars: 1 },
        { value: 'sometimes', label: '–ò–Ω–æ–≥–¥–∞', subtitle: '1-2 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é', bars: 2 },
        { value: 'often', label: '–ß–∞—Å—Ç–æ', subtitle: '3-4 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é', bars: 3 },
        { value: 'always', label: '–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞', subtitle: '5-7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é', bars: 4 }
      ]
    },
    {
      id: 'activity',
      title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      description: '–ö–∞–∫ –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏?',
      icon: 'üèÉ',
      options: [
        { value: 'passive', label: '–ü–∞—Å—Å–∏–≤–Ω–∞—è', subtitle: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', bars: 1 },
        { value: 'minimal', label: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', subtitle: '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é', bars: 2 },
        { value: 'moderate', label: '–£–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω–∞—è', subtitle: '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å', bars: 3 },
        { value: 'active', label: '–ê–∫—Ç–∏–≤–Ω–∞—è', subtitle: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å', bars: 4 }
      ]
    },
    {
      id: 'sleep',
      title: '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞',
      description: '–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –≤—ã —Å–ø–∏—Ç–µ –∫–∞–∂–¥—É—é –Ω–æ—á—å?',
      icon: 'üò¥',
      options: [
        { value: 'less5', label: '–ú–µ–Ω–µ–µ 5 —á–∞—Å–æ–≤', subtitle: '', bars: 1 },
        { value: '5-6', label: '5-6 —á–∞—Å–æ–≤', subtitle: '', bars: 2 },
        { value: '7-8', label: '7-8 —á–∞—Å–æ–≤', subtitle: '', bars: 3 },
        { value: 'more8', label: '–ë–æ–ª–µ–µ 8 —á–∞—Å–æ–≤', subtitle: '', bars: 4 }
      ]
    },
    {
      id: 'weight',
      title: '–ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Å–∞',
      description: '–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å?',
      icon: 'üßç',
      options: [
        { value: 'underweight', label: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å', subtitle: '', bars: 1 },
        { value: 'normal', label: '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å', subtitle: '', bars: 3 },
        { value: 'overweight', label: '–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å', subtitle: '', bars: 2 },
        { value: 'obese', label: '–û–∂–∏—Ä–µ–Ω–∏–µ', subtitle: '', bars: 1 }
      ]
    }
  ]

  const handleAnswer = (questionId: string, value: string) => {
    setAnswers(prev => ({ ...prev, [questionId]: value }))
  }

  const handleNext = () => {
    if (currentScreen === 0) {
      setCurrentScreen(1)
    } else if (currentScreen === 1) {
      setCurrentScreen(2)
    } else if (currentScreen === 2) {
      setCurrentScreen(3)
    } else if (currentScreen >= 3 && currentScreen < 3 + questions.length) {
      const questionIndex = currentScreen - 3
      if (questionIndex < questions.length - 1) {
        setCurrentScreen(currentScreen + 1)
      } else {
        setCurrentScreen(3 + questions.length)
      }
    }
  }

  const handleBack = () => {
    if (currentScreen > 3) {
      setCurrentScreen(currentScreen - 1)
    }
  }

  const getProgress = () => {
    if (currentScreen < 3) return 0
    const questionIndex = currentScreen - 3
    return ((questionIndex + 1) / questions.length) * 100
  }

  const calculateScore = () => {
    let totalScore = 0
    let maxScore = 0

    questions.forEach(q => {
      const answer = answers[q.id]
      const option = q.options.find(opt => opt.value === answer)
      if (option) {
        totalScore += option.bars
      }
      maxScore += 4
    })

    return Math.round((totalScore / maxScore) * 100)
  }

  if (currentScreen === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-blue-500 to-blue-600 flex flex-col items-center justify-between px-6 py-12 text-white">
        <div className="flex-1 flex flex-col items-center justify-center">
          <h1 className="text-[80px] font-bold tracking-wider mb-8">PLAN</h1>
          <p className="text-xl text-center text-white/90 max-w-xs">
            –ò–∑–º–µ–Ω–∏ —Å–≤–æ—é –∂–∏–∑–Ω—å ‚Äî –ø–æ—Å—Ç—Ä–æ–π —Å–≤–æ–π –ø–ª–∞–Ω
          </p>
        </div>
        
        <div className="w-full max-w-md space-y-4">
          <button
            onClick={handleNext}
            className="w-full bg-white text-black font-semibold py-4 rounded-full text-lg hover:bg-gray-100 transition-colors"
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </button>
          <button className="w-full text-white font-medium py-4 text-lg">
            –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
          </button>
        </div>
      </div>
    )
  }

  if (currentScreen === 1) {
    return (
      <div className="min-h-screen bg-white flex flex-col px-6 py-12">
        <div className="flex-1 flex flex-col justify-center">
          <h2 className="text-2xl font-bold mb-8 leading-tight">
            –ù–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –∫–∞—Å–∫–∞–¥–Ω–æ –≤–ª–∏—è—é—Ç{' '}
            <span className="text-blue-500">4 —ç–ª–µ–º–µ–Ω—Ç–∞</span>:
          </h2>

          <div className="space-y-4">
            <div className="bg-gray-50 rounded-2xl p-5 flex items-center gap-4">
              <span className="text-3xl">üèÉ</span>
              <span className="text-lg font-semibold">–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
            </div>

            <div className="bg-gray-50 rounded-2xl p-5 flex items-center gap-4">
              <span className="text-3xl">üçå</span>
              <span className="text-lg font-semibold">–ü–∏—Ç–∞–Ω–∏–µ</span>
            </div>

            <div className="bg-gray-50 rounded-2xl p-5 flex items-center gap-4">
              <span className="text-3xl">üò¥</span>
              <span className="text-lg font-semibold">–°–æ–Ω</span>
            </div>

            <div className="bg-gray-50 rounded-2xl p-5 flex items-center gap-4">
              <span className="text-3xl">üßç</span>
              <span className="text-lg font-semibold">–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Å</span>
            </div>
          </div>
        </div>

        <button
          onClick={handleNext}
          className="w-full bg-blue-500 text-white font-semibold py-4 rounded-full text-lg hover:bg-blue-600 transition-colors mt-8"
        >
          –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å?
        </button>
      </div>
    )
  }

  if (currentScreen === 2) {
    return (
      <div className="min-h-screen bg-white flex flex-col px-6 py-12">
        <div className="flex-1 flex flex-col justify-center items-start">
          <div className="mb-12">
            <svg width="60" height="60" viewBox="0 0 60 60" fill="none">
              <circle cx="30" cy="30" r="20" stroke="url(#gradient)" strokeWidth="8" strokeLinecap="round" strokeDasharray="100 100" transform="rotate(-90 30 30)">
                <animateTransform
                  attributeName="transform"
                  type="rotate"
                  from="0 30 30"
                  to="360 30 30"
                  dur="2s"
                  repeatCount="indefinite"
                />
              </circle>
              <defs>
                <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                  <stop offset="0%" stopColor="#FFA500" />
                  <stop offset="50%" stopColor="#FF69B4" />
                  <stop offset="100%" stopColor="#FF6347" />
                </linearGradient>
              </defs>
            </svg>
          </div>

          <h2 className="text-3xl font-bold mb-4 leading-tight">
            –ü—Ä–æ–≤–µ–¥—ë–º –Ω–µ–±–æ–ª—å—à–æ–π —Å–∫—Ä–∏–Ω–∏–Ω–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å{' '}
            <span className="text-blue-500">–≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</span>
          </h2>
        </div>

        <button
          onClick={handleNext}
          className="w-full bg-blue-500 text-white font-semibold py-4 rounded-full text-lg hover:bg-blue-600 transition-colors"
        >
          –ù–∞—á–Ω—ë–º!
        </button>
      </div>
    )
  }

  if (currentScreen >= 3 && currentScreen < 3 + questions.length) {
    const questionIndex = currentScreen - 3
    const currentQuestion = questions[questionIndex]
    const currentAnswer = answers[currentQuestion.id]

    return (
      <div className="min-h-screen bg-white flex flex-col px-6 py-12">
        <div className="mb-8">
          <div className="flex items-center gap-4 mb-6">
            <button onClick={handleBack} className="text-gray-600 hover:text-gray-800">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M15 18l-6-6 6-6" />
              </svg>
            </button>
            <div className="flex-1 bg-gray-200 rounded-full h-1.5">
              <div
                className="bg-blue-500 h-1.5 rounded-full transition-all duration-300"
                style={{ width: `${getProgress()}%` }}
              />
            </div>
          </div>

          <h2 className="text-2xl font-bold mb-3">{currentQuestion.title}</h2>
          <p className="text-gray-600 text-base leading-relaxed">
            {currentQuestion.description}
          </p>
        </div>

        <div className="flex-1 space-y-3">
          {currentQuestion.options.map((option) => (
            <button
              key={option.value}
              onClick={() => handleAnswer(currentQuestion.id, option.value)}
              className={`w-full bg-gray-50 rounded-2xl p-5 flex items-start gap-4 text-left transition-all hover:bg-gray-100 ${
                currentAnswer === option.value ? 'ring-2 ring-blue-500 bg-blue-50' : ''
              }`}
            >
              <div className="flex flex-col gap-0.5 mt-1">
                {Array.from({ length: option.bars }).map((_, i) => (
                  <div
                    key={i}
                    className={`w-1 h-2 rounded-full ${
                      currentAnswer === option.value ? 'bg-blue-500' : 'bg-blue-400'
                    }`}
                  />
                ))}
              </div>
              <div className="flex-1">
                <div className="font-semibold text-lg mb-0.5">{option.label}</div>
                {option.subtitle && (
                  <div className="text-sm text-gray-500">{option.subtitle}</div>
                )}
              </div>
            </button>
          ))}
        </div>

        <button
          onClick={handleNext}
          disabled={!currentAnswer}
          className="w-full bg-blue-500 text-white font-semibold py-4 rounded-full text-lg hover:bg-blue-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed mt-8"
        >
          –î–∞–ª–µ–µ
        </button>
      </div>
    )
  }

  if (currentScreen === 3 + questions.length) {
    const score = calculateScore()
    
    return (
      <div className="min-h-screen bg-gradient-to-b from-blue-500 to-blue-600 flex flex-col items-center justify-center px-6 py-12 text-white">
        <div className="text-center">
          <div className="text-8xl font-bold mb-4">{score}%</div>
          <h2 className="text-2xl font-semibold mb-2">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h2>
          <p className="text-lg text-white/90 mb-12">
            {score >= 75 ? '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.' :
             score >= 50 ? '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å.' :
             score >= 25 ? '–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.' :
             '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è —Å–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.'}
          </p>

          <div className="space-y-4 mb-12">
            {questions.map((q) => {
              const answer = answers[q.id]
              const option = q.options.find(opt => opt.value === answer)
              return (
                <div key={q.id} className="bg-white/10 backdrop-blur-sm rounded-2xl p-4 text-left">
                  <div className="flex items-center gap-3 mb-2">
                    <span className="text-2xl">{q.icon}</span>
                    <span className="font-semibold">{q.title}</span>
                  </div>
                  <div className="text-sm text-white/80 ml-11">
                    {option?.label || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </div>
                </div>
              )
            })}
          </div>

          <button
            onClick={() => {
              setCurrentScreen(0)
              setAnswers({})
            }}
            className="w-full max-w-md bg-white text-blue-600 font-semibold py-4 rounded-full text-lg hover:bg-gray-100 transition-colors"
          >
            –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    )
  }

  return null
}

export default Index
